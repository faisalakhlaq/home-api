# Generated by Django 5.2.4 on 2025-07-24 21:58

import apps.properties.models.property
import apps.properties.models.property_image
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("locations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="PropertyImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was first created.",
                        verbose_name="Creation Date & Time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Last Update Date & Time",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional title  for the image.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description for the image."
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Primary image will be displayed first for the property.",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Image of the property.",
                        upload_to=apps.properties.models.property_image.property_image_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["png", "jpg", "jpeg", "bmp", "gif"]
                            )
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Property Image",
                "verbose_name_plural": "Property Images",
            },
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was first created.",
                        verbose_name="Creation Date & Time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Last Update Date & Time",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The asking price of the property.",
                        max_digits=19,
                        validators=[apps.properties.models.property.validate_positive],
                    ),
                ),
                (
                    "price_currency",
                    models.CharField(
                        help_text="Provide the 3-letter currency code for the price (e.g., 'USD', 'EUR', 'GBP').",
                        max_length=5,
                    ),
                ),
                (
                    "area",
                    models.FloatField(
                        help_text="The covered area of the property in square meters (m²).\n            This refers to the total indoor living space, including all rooms,\n            hallways, and any other enclosed spaces within the structure.",
                        validators=[apps.properties.models.property.validate_positive],
                    ),
                ),
                (
                    "total_area",
                    models.FloatField(
                        help_text="The total ground area of the property (m²). This encompasses\n            the entire land area upon which the property is built, including\n            outdoor spaces such as yards, gardens, and driveways.",
                        validators=[apps.properties.models.property.validate_positive],
                    ),
                ),
                (
                    "measured_area",
                    models.FloatField(
                        blank=True,
                        help_text="The officially measured and verified area of the property, typically used for legal or appraisal purposes (m²).",
                        null=True,
                        validators=[apps.properties.models.property.validate_positive],
                    ),
                ),
                (
                    "total_rooms",
                    models.FloatField(
                        blank=True,
                        help_text="The total number of distinct rooms within the property,\n            excluding bathrooms and kitchens unless specified otherwise.",
                        null=True,
                        validators=[apps.properties.models.property.validate_positive],
                    ),
                ),
                (
                    "toilets",
                    models.IntegerField(
                        blank=True,
                        help_text="The total number of toilet facilities in the property.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "construction_year",
                    models.IntegerField(
                        blank=True,
                        help_text="The year in which the main construction of the property was completed.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            apps.properties.models.property.validate_max_current_year,
                        ],
                    ),
                ),
                (
                    "renovation_year",
                    models.IntegerField(
                        blank=True,
                        help_text="The most recent year in which significant renovations or major updates were performed on the property.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            apps.properties.models.property.validate_max_current_year,
                        ],
                    ),
                ),
                (
                    "total_floors",
                    models.IntegerField(
                        blank=True,
                        help_text="The total number of floors or stories that the property comprises.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "heating",
                    models.CharField(
                        blank=True,
                        help_text="Detailed description of the heating system, e.g.,\n            'Central heating with gas furnace' or 'Electric baseboard heating'.",
                        max_length=255,
                    ),
                ),
                (
                    "outer_walls",
                    models.CharField(
                        blank=True,
                        help_text="The primary material used for the exterior walls, e.g., 'Brick', 'Stucco', 'Wood siding'.",
                        max_length=255,
                    ),
                ),
                (
                    "roof_type",
                    models.CharField(
                        blank=True,
                        help_text="The type of roofing material and style, e.g., 'Tile', 'Shingle', 'Flat roof'.",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A comprehensive internal description highlighting the\n            key features, amenities, and unique selling points of the property\n            for administrative use.",
                    ),
                ),
                (
                    "property_type",
                    models.CharField(
                        choices=[
                            ("SINGLE_FAMILY", "Single-family detached home"),
                            ("APARTMENT", "Apartment"),
                            ("CONDOMINIUM", "Condominium (Condo)"),
                            ("TOWNHOUSE", "Townhouse"),
                            ("DUPLEX", "Duplex"),
                            ("TRIPLEX", "Triplex"),
                            ("COOP", "Co-operative housing (Co-op)"),
                            ("FARMHOUSE", "Farmhouse"),
                            ("MANSION", "Mansion"),
                            ("LAND", "Land / Ground"),
                            ("BOATHOUSE", "Boathouse"),
                            ("RECREATIONAL", "Recreational residence"),
                            ("COUNTRY_HOME", "Country property"),
                            ("COTTAGE", "Cottage"),
                            ("TINY_HOME", "Tiny home"),
                            ("MOBILE_HOME", "Mobile home"),
                            ("PENTHOUSE", "Penthouse"),
                            ("LOFT", "Loft"),
                            ("MULTI_UNIT", "Multi-family / Multi-unit property"),
                            ("MIXED_USE", "Mixed-use property"),
                            ("COMMERCIAL", "Commercial space"),
                            ("INDUSTRIAL", "Industrial property"),
                            ("OFFICE", "Office space"),
                            ("WAREHOUSE", "Warehouse"),
                        ],
                        help_text="The classification or genre of the property (e.g., 'Residential', 'Commercial', 'Apartment', 'House').",
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("COMING_SOON", "Coming soon"),
                            ("UNDER_CONTRACT", "Under contract"),
                            ("PENDING", "Pending"),
                            ("SOLD", "Sold"),
                            ("LEASED", "Leased"),
                            ("AUCTION", "Auction"),
                            ("OFF_MARKET", "Off market"),
                            ("EXPIRED", "Expired"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("CANCELED", "Canceled"),
                            ("DRAFT", "Draft"),
                        ],
                        default="ACTIVE",
                        help_text="The current transactional status of the property (e.g., 'For Sale', 'Under Contract', 'Sold', 'Rented').",
                        max_length=255,
                    ),
                ),
                (
                    "available_from",
                    models.DateField(
                        blank=True, help_text="When can the buy move in.", null=True
                    ),
                ),
                (
                    "energy_class",
                    models.CharField(
                        blank=True,
                        help_text="What is the energy class of the property. (e.g. A, B, C, D, E, F, G)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "street_name",
                    models.CharField(
                        help_text="The name of the street where the property is located.\n                For example: 'Åfløjen'.",
                        max_length=255,
                    ),
                ),
                (
                    "street_number",
                    models.CharField(
                        blank=True,
                        help_text="The house or building number on the street.\n                Supports formats like '40', '12A', or '13-15'.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        help_text="The postal code for the property's location, e.g., '8000'.",
                        max_length=20,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        help_text="The city or town native name where the property is located.",
                        max_length=255,
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        help_text="The administrative region or municipality of the property.\n                This can be useful for broader geographical filtering.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="The ISO 3166-1 Alpha-2 country code (e.g., 'DK' for\n                Denmark). Used for filtering and international support.",
                        max_length=2,
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        help_text="The physical address where the property is located.",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="address_properties",
                        to="locations.address",
                    ),
                ),
            ],
            options={
                "verbose_name": "Property",
                "verbose_name_plural": "Properties",
            },
        ),
    ]
