# Generated by Django 5.2.4 on 2025-07-24 21:38

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The official or native name of the city (e.g., 'København'\n            in Danish, 'Munich' in English/German). This is the primary\n            identifier for the city within its country.",
                        max_length=255,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly, language-neutral identifier for the city. Typically generated from the native city name (e.g., 'kobenhavn' for 'København'). Used for clean and SEO-friendly URLs, internal API lookups, and routing logic. Recommended for use in frontend routing and internationalized applications.",
                        max_length=80,
                        unique=True,
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        help_text="An optional administrative region name within the country\n            (e.g., 'Capital Region of Denmark', 'Bavaria' for Germany,\n            'California' for USA). This field captures larger sub-national\n            divisions that a city belongs to.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="The latitude coordinate of the city's approximate geographical\n            center. This is used for general map positioning, displaying\n            city-level markers, or calculating distances.",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="The longitude coordinate of the city's approximate geographical\n            center. This is used for general map positioning, displaying\n            city-level markers, or calculating distances.",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "City",
                "verbose_name_plural": "Cities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="The ISO 3166-1 Alpha-2 country code (e.g., 'DK' for Denmark,\n            'US' for United States). This two-letter code is a globally\n            recognized and unique identifier for each country, essential\n            for standardized data representation and integration with\n            external services.",
                        max_length=2,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(2),
                        ],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The common English name of the country (e.g., 'Denmark',\n            'Germany'). This name serves as the primary display name\n            for the country in the application's English interface.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "native_name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the country in its local or native language\n            (e.g., 'Danmark' for Denmark, 'Deutschland' for Germany).\n            This field is optional but highly valuable for providing\n            a fully localized user experience.",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was first created.",
                        verbose_name="Creation Date & Time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Last Update Date & Time",
                    ),
                ),
                (
                    "street_name",
                    models.CharField(
                        help_text="The primary name of the street or road without any house\n            or building numbers (e.g., 'Åfløjen', 'Main Street').",
                        max_length=255,
                    ),
                ),
                (
                    "street_number",
                    models.CharField(
                        blank=True,
                        help_text="The specific house, building, or unit number for the address\n            (e.g., '40A', '123', 'Unit 5'). This field is optional as\n            some addresses may not have a distinct number.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        help_text="The postal code or ZIP code associated with this address.\n            This is a critical component for mail delivery and often\n            used in geographical lookups.",
                        max_length=20,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="The precise latitude coordinate of the address. This is\n            essential for accurate map positioning, displaying property\n            markers, and performing geospatial queries.",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="The precise longitude coordinate of the address. This is\n            essential for accurate map positioning, displaying property\n            markers, and performing geospatial queries.",
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        help_text="A foreign key linking this address to its corresponding city\n            from the standardized City model. This ensures data integrity\n            and consistency for city information.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="addresses",
                        to="locations.city",
                    ),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.AddField(
            model_name="city",
            name="country",
            field=models.ForeignKey(
                help_text="A foreign key linking this city to its corresponding country.\n            If the linked country record is deleted, all associated cities\n            will also be removed from the database.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cities",
                to="locations.country",
            ),
        ),
        migrations.CreateModel(
            name="CityTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        help_text="The ISO 639-1 language code for this translation (e.g., 'en'\n            for English, 'fr' for French, 'de' for German). This code\n            specifies the target language for the translated name.",
                        max_length=10,
                    ),
                ),
                (
                    "translated_name",
                    models.CharField(
                        help_text="The name of the city in the specified language (e.g., if the\n            native city name is 'København', its 'en' translated_name\n            would be 'Copenhagen').",
                        max_length=255,
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        help_text="The city for which this translation is provided. If the\n            associated city record is deleted, this translation will\n            also be automatically removed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="locations.city",
                    ),
                ),
            ],
            options={
                "verbose_name": "City Translation",
                "verbose_name_plural": "City Translations",
                "unique_together": {("city", "language")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="city",
            unique_together={("name", "country")},
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The specific name of this location unit (e.g., 'København Ø'\n            for a city area, 'Åfløjen' for a street). This is the primary\n            label for the geographical unit.",
                        max_length=255,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Unique, URL-safe identifier for this geographic area (e.g., region, district, neighborhood, or street). Generated from the name and used for building navigable routes, filters, and internal queries (e.g., 'osterbro', 'kobenhavn-v'). Helps support faceted navigation and search paths across different hierarchy levels.",
                        max_length=80,
                        unique=True,
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("region", "Region (e.g., Capital Region)"),
                            (
                                "municipality",
                                "Municipality (e.g., Copenhagen Municipality)",
                            ),
                            ("city_area", "City Area/District (e.g., København Ø)"),
                            ("street", "Street (e.g., Åfløjen)"),
                        ],
                        help_text="The type of geographical unit this location represents\n            (e.g., 'region', 'municipality', 'city_area', 'street').\n            This categorizes the location within the hierarchy.",
                        max_length=50,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Optional central latitude coordinate for this location unit.\n            Useful for displaying a central point on a map for broader\n            areas like streets or city areas.",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Optional central longitude coordinate for this location unit.\n            Useful for displaying a central point on a map for broader\n            areas like streets or city areas.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        help_text="The country this location unit primarily belongs to. This\n            helps in scoping top-level locations and ensuring all\n            hierarchical units are linked to a specific country.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="locations.country",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="A foreign key to another Location instance, representing the\n            parent location in the hierarchy (e.g., a 'city_area' might\n            have a 'municipality' as its parent). This field is null\n            for top-level locations (e.g., regions or countries).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="locations.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Location",
                "verbose_name_plural": "Locations",
                "ordering": ["name"],
                "unique_together": {("name", "location_type", "country")},
            },
        ),
    ]
