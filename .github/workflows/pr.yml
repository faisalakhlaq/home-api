name: PR CI Pipeline

on:
  # Considering the limited number of free github minutes and assuming the
  # developer knows what they are doing:
  # Let push directly updated the dev without running the checks.
  # push:
  #   branches:
  #     - development
  pull_request:
    branches:
      - development

  # Allow to run the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    env:
      DEBUG: "False"
      DATABASE_NAME_MYSQL: ${{ vars.DATABASE_NAME_MYSQL }}
      DATABASE_USER_MYSQL: ${{ vars.DATABASE_USER_MYSQL }}
      DATABASE_HOST_MYSQL: mysql
      DATABASE_PORT_MYSQL: ${{ vars.DATABASE_PORT_MYSQL }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
      CORS_ALLOW_CREDENTIALS: ${{ vars.CORS_ALLOW_CREDENTIALS }}
      DJANGO_SETTINGS_MODULE: "settings.production"

    services:
      # MySQL service for testing
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          MYSQL_DATABASE: ${{ vars.DATABASE_NAME_MYSQL }}
          MYSQL_USER: ${{ vars.DATABASE_USER_MYSQL }}
          MYSQL_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Lets cache dependencies to significantly speed up subsequent runs.
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt', '**/requirements-prod.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-prod.txt

      # Install development/CI tools
      # Install tools for linting, formatting, security, and type checking.
      - name: Install CI/CD tools
        run: |
          pip install -r requirements-dev.txt
          pip install black pip-audit

      - name: Run Black
        run: black --check .

      - name: Run Flake8
        run: flake8 . --max-line-length=120

      - name: Run MyPy
        run: mypy .

      # Optionally run Isort for import sorting check (remember to deactivate flak8 sorting)
      # Isort sorts imports alphabetically and separates them into sections. --check-only ensures it only reports.
      # - name: Run Isort (check only)
      #   run: isort --check-only .

      - name: Run Bandit
        run: bandit -r . -ll -f custom -o bandit_report.txt || true # -ll for low confidence, low severity. || true to not fail the workflow immediately.

      # Run pip-audit for vulnerable dependencies
      # Checks your installed Python packages for known vulnerabilities.
      - name: Run pip-audit
        run: pip-audit || true # || true to not fail the workflow immediately if minor issues are found

      # Check for pending database migrations
      # This step ensures that all database migrations have been applied or created.
      # It runs a dry-run check without actually applying anything.
      - name: Check for pending migrations
        run: python manage.py makemigrations --check --dry-run

      - name: Run Django tests
        run: python manage.py test

      - uses: 5monkeys/cobertura-action@master
        with:
          path: backend/coverage.xml
          minimum_coverage: 75
